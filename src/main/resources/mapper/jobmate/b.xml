<?xml version="1.0" encoding="utf-8"?>
<!--DOCTYPE sqlMap SYSTEM "https://raw.githubusercontent.com/netcorner/sqlmapper/master/files/sqlMap.dtd"-->
<!--合并xml文档,在sqlmap中的merge属性-->
<sqlMap  merge="jobmate.base">
	<!--&lt;!&ndash;基本的表操作,继承Jobmate.Base的结点&ndash;&gt;-->
	<!--<statement id="add">-->
		<!--<insert>-->
			<!--#Insert()-->
		<!--</insert>-->
	<!--</statement>-->
	<!--<statement id="edit">-->
		<!--<update>-->
			<!--#Update()-->
		<!--</update>-->
	<!--</statement>-->
	<!--<statement id="del">-->
		<!--<delete>-->
			<!--#Delete()-->
		<!--</delete>-->
	<!--</statement>-->
	<!--<statement id="finder">-->
		<!--<select id="t1">-->
			<!--select*from $table where #Where() order by $primary desc-->
		<!--</select>-->
	<!--</statement>-->
	<!--<statement id="page">-->
		<!--<page></page>-->
	<!--</statement>-->




	<sql id="aa">
		,2 b
	</sql>


	<statement id="test">
		<select>
			select 1 as b

			#aa()
		</select>
	</statement>

	<statement id="mutile1">
		<insert>
			insert into a(a,b)
			values('777','1')
		</insert>
		<select>
			select 1 status
		</select>
		<insert>
			insert into a(a,b)
			values('1233333333333333333333333333333333','1')
		</insert>
		<insert>
			insert into a(a,b)
			values('777','1')
		</insert>
	</statement>

	<statement id="mutile2">
		<insert>
			insert into a(a,b)
			values('1233333333333333333333333333333333','1')
		</insert>
		<select>
			select 1 status
		</select>
	</statement>



	<!--id值不区分大小写-->
	<statement id="insert">
		<!--循环用法,该处理是事务级的-->
		<!--变量是以$map.开始的-->
		<!--多语句处理通过大括号({})包裹-->
		<!--#Insert是内置的对该表数据进行自动筛选插入的语句的函数-->
		<!--#Update是内置的对该表数据进行自动筛选更新的语句的函数-->
		<!--#Delete是内置的对该表数据进行自动筛选删除的语句的函数-->
		<!--#Where是内置的对该表数据进行自动筛选条件的语句的函数-->
		<insert>
			#set($i=0)
			#foreach($o in $map.list)
			#set($map=$o)
			{#Insert()}
			#end
		</insert>
	</statement>






	<!--公用函数的使用，函数定义方式参考velocity的宏定义方法-->
	<!--function标签在xml文档中只有一个节点-->
	<function>
		#macro(Test $a $b)
			select*from $a where id=$b
		#end
	</function>
	<!--函数调用方式-->
	<statement id="fun">
		<select>
			#Test('b',2)
		</select>
	</statement>
	<!--调用其它表相关操作,区分大小写 事务级-->
	<!--调用其它xml文档的statement时通过大括号({})包起来调用-->
	<!--示例调用{Jobmate.b.insert} 调用jobmate数据库下的b表的statementid为add的statement语句-->
	<!--ext的内容里面可以调用其它xml文档的statement，但是里面只能有一个调用-->
	<!--ext中的key属性是传递过来的map下对应key值（该key指对应的类型必须为hashmap,若为list<map>类型将插入多条对应的如{Jobmate.b.add}插入）-->
	<statement id="ext">
		<ext id="i" key="b">
			{Jobmate.b.add}
		</ext>
		<!--key="a" 这个a可对应的hash表中的数据若是List类型就是插入多条，如果是Map类型就只插入一条-->
		<ext id="u" key="a">
			#if($map.i==1)
				{Jobmate.a.add}
			#end
		</ext>
	</statement>
	<!--多数据源的 事务级-->
	<statement id="extMore">
		<ext id="i" key="b">
			{Jobmate.b.add}
		</ext>
		<!--key="a" 这个a可对应的hash表中的数据若是List类型就是插入多条，如果是Map类型就只插入一条-->
		<ext id="u" key="a">
			#if($map.i==1)
			{Jobmate1.a.add}
			#end
		</ext>
	</statement>

	<statement id="multi">
		<!--多标签处理事件,该处理是事务级的,从上往下执行-->
		<!--不使用内置函数，直接写sql语句-->
		<delete>
			delete from b where id=111
		</delete>
		<insert>
			insert into b(id,a) values(111,'abc')
		</insert>
		<update>
			{update b set a='cba' where id=111}
		</update>
	</statement>
	<statement id="ids">
		<!--多标签处理事件某个标签执行完将返回值存于标签id名的hashtable,标签中id目的是为后面标签取值用到的,该处理是事务级的,从上往下执行-->
		<!--当某个条件不成立这里如果没有可执行的语句时，这个标签就是不执行的-->
		<!--最后一个标签是最终的返回值，insert,update,delete是返回状态值（1成功，0失败）select,page是返回结果集的-->
		<select id="res">
			select* from b where id=111
		</select>
		<update id="updatestate">
			#foreach($r in $map.res)
				#if($r.id)
				{update b set a='ttttxx' where id=$r.id}
				#end
			#end
		</update>
		<delete>
			#if($map.updatestate==1)
				{delete from b where id=1}
			#end
		</delete>
		<select id="abc">
			select* from b where id=111
		</select>
	</statement>
	<statement id="select">
		<!--select中的子节点应用,取得多个结果集并且生成一个有关系的hashtable-->
		<!--select中的id是为了后面标签取得执行结果集用的-->
		<!--select下面只能有一个主标签(必须指定primary,id属性，该primary肯定是唯一的)-->
		<!--select下面可以有无限级的子标签(必须指定id子节点名,foreign上级对应primary指定字段值和子表对应的字段名,parent上级id名)，若该子节点下还有他的子节点者必须再指定primary-->
		<select id="res">
			<query id="table" primary="indexID">
				select 1 as indexID
			</query>
			<query id="account" parent="table" foreign="indexID">
				select *,1 as indexID from b where id=111
			</query>
		</select>
		<!--多个语句必须用分号分开-->
		<update>
			#foreach($r in $map.res)
				#foreach($a in $r.account)
					{update b set a='kkkk' where id=$a.id}
				#end
			#end
		</update>
	</statement>
	<statement id="simplepage1">
		<!--分页page标签的简单应用,列出当前页的记录集和记录数量统计-->
		<!--page中的primary是分页表的主键，若不写会得到对应表的主键名，但要是表有复合主键或者没有主键不指定primary会报错-->
		<!--page下的select标签是筛选显示的字段，不写该标签就是列出所有字段，可写传递参数-->
		<!--page下的from标签是选取哪个表格，不写该标签就是列出当前xml所对应的表，可写传递的参数-->
		<!--page下的order标签是排序方式，不写该标签就是表的默认排序，可写传递的参数-->
		<page></page>
	</statement>
	
	<statement id="simplepage2">
		<!--分页page标签的简单应用,列出当前页的记录集和记录数量统计-->
		<page id="sqlserver" primary="id">
			<select>*</select>
			<from>b</from>
			<where>1=1</where>
			<order>a desc</order>
		</page>
	</statement>
	<statement id="simplepage3">
		<!--分页page标签的统计,列出当前页的记录集和记录数量统计-->
		<!--page下的count标签是列表from表的相关统计功能,total为记录个数这个是固定的-->
		<page id="sqlserver" primary="id">
			<select>*</select>
			<from>b</from>
			<where>1=1</where>
			<order>a desc</order>
			<count>
				sum(id) as abc,
				count(*) as total
			</count>
		</page>
	</statement>
	<statement id="simplepage4">
		<!--分页page标签的统计,列出当前页的记录集和记录数量统计-->
		<!--page下的count标签自定义统计-->
		<!--统计中若没有total别名的字段分页将会失效-->
		<page id="sqlserver" primary="id">
			<select>*</select>
			<from>b</from>
			<where>1=1</where>
			<order>a desc</order>
			<count>
				select sum(id) s  from b
			</count>
		</page>
	</statement>
	<statement id="simplepage5">
		<!--分页page标签的子结点应用-->
		<!--page下的children标签,用于列出page下面的子结点，方式可参考select的query标签-->
		<page id="page" primary="id">
			<select>*</select>
			<from>b</from>
			<where>1=1</where>
			<order>a desc</order>
			<children id="list" parent="page" foreign="b">
				select 1 as a,3 as b
			</children>
		</page>
	</statement>




	<statement id="111">
		<insert>
			insert into b(a,c)
			values(2,3)
		</insert>
		<select id="result">
			<query id="user" primary="UserID">
			select *from b limit 0,1
			</query>
		</select>
	</statement>

	<statement id="_page_children">

		<select id="result">
			select *,a as FK from a where
			a in (
			0
			#foreach($obj in $map.list)
			,'$obj.a'
			#end
			)
		</select>
	</statement>


	<statement id="_list">
		<select id="result">
			<query id="user" primary="a">
				select*from $table where #Where()
			</query>
			<query id="children" parent="user" foreign="a">
				select *from a limit 0,1
			</query>
		</select>
	</statement>
</sqlMap>